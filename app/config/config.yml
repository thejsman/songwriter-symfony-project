imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en
    update_token_links:
        "web:password-reset": "%reset_password_link%"

framework:
    #esi: ~
    #translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: { enabled: false }
    validation: { enable_annotations: true }
    serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # http://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: { enabled: false }
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_pgsql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        server_version: '5.7'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: '%kernel.project_dir%/data/data.db3'
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        filters:
            softdeleteable:
                class: Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
                enabled: true

stof_doctrine_extensions:
    orm:
        default:
            timestampable: true
            softdeleteable: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    port: '%mailer_port%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    encryption: '%mailer_encryption%'
    spool: '%mailer_spool%'

# Nelmio CORS
nelmio_cors:
    defaults:
        allow_origin: ['%cors_allow_origin%']
        allow_methods: ['POST', 'PUT', 'GET', 'DELETE', 'OPTIONS']
        allow_headers: ['content-type', 'authorization']
        expose_headers: ['link']
        max_age: 3600
    paths:
        '^/': ~

fos_oauth_server:
    db_driver: orm
    client_class:        AuthBundle\Entity\Client
    access_token_class:  AuthBundle\Entity\AccessToken
    refresh_token_class: AuthBundle\Entity\RefreshToken
    auth_code_class:     AuthBundle\Entity\AuthCode
    service:
        user_provider: auth.security.user_provider
        options:
            access_token_lifetime: 1209600
            refresh_token_lifetime: 1209600

oneup_flysystem:
    adapters:
        app.media_flysystem_adapter:
            awss3v2:
                client: app.aws.s3_client
                bucket: "%aws_s3_bucket%"
                prefix: "media"
        app.avatars_flysystem_adapter:
            awss3v2:
                client: app.aws.s3_client
                bucket: "%aws_s3_bucket%"
                prefix: "avatars"
    filesystems:
        attachments:
            adapter: app.media_flysystem_adapter
        avatars:
            adapter: app.avatars_flysystem_adapter

oneup_uploader:
    chunks:
        maxage: 86400
        storage:
            directory: "%kernel.cache_dir%/uploader/chunks"

    mappings:
        attachments:
            frontend: custom
            custom_frontend:
                class: AppBundle\Controller\AttachmentUploadController
                name: AttachmentUploader
            enable_progress: true
            storage:
                type: "flysystem"
                filesystem: oneup_flysystem.attachments_filesystem
            allowed_mimetypes:
                - "audio/mpeg"
                - "audio/mp4"
                - "audio/x-m4a"
        avatars:
            frontend: blueimp
            enable_progress: true
            storage:
                type: "flysystem"
                filesystem: oneup_flysystem.avatars_filesystem
            allowed_mimetypes:
                - "image/jpeg"
                - "image/pjpeg"
                - "image/png"